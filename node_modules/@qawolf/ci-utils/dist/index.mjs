import { error, info, warning } from '@actions/core';
import zod from 'zod';

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });

// src/string.ts
function stringifyUnknown(value) {
  if (value === null || value === undefined) return "";
  if (typeof value === "string") return value;
  if (value instanceof Error) {
    if ("message" in value && typeof value.message === "string") return value.message;
    return value.toString();
  }
  try {
    const stringified = JSON.stringify(value);
    return !stringified ? "" : stringified;
  } catch {
    return "";
  }
}
__name(stringifyUnknown, "stringifyUnknown");

// src/log.ts
var coreLogDriver = {
  error(message, error$1) {
    error(message + (error$1 ? `
${stringifyUnknown(error$1)}` : ""));
  },
  info,
  warn: warning
};
var environmentVariablesSchema = zod.record(zod.string(), zod.string());
var jsonEnvironmentVariablesSchema = zod.string().transform((str, ctx) => {
  try {
    return JSON.parse(str);
  } catch (error) {
    ctx.addIssue({
      code: "custom",
      message: "input is not a valid JSON-formatted string"
    });
    return;
  }
}).pipe(environmentVariablesSchema);
var environmentsMappingSchema = zod.array(zod.object({
  environmentAlias: zod.string(),
  vcsBranch: zod.string()
}));
var jsonEnvironmentsMappingSchema = zod.string().transform((str, ctx) => {
  try {
    return JSON.parse(str);
  } catch (error) {
    ctx.addIssue({
      code: "custom",
      message: "input is not a valid JSON-formatted string"
    });
    return;
  }
}).pipe(environmentsMappingSchema);

export { coreLogDriver, jsonEnvironmentVariablesSchema, jsonEnvironmentsMappingSchema, stringifyUnknown };
//# sourceMappingURL=index.mjs.map
//# sourceMappingURL=index.mjs.map