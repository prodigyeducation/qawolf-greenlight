import zod from 'zod';

interface LogDriver {
    error(message: string, error?: unknown): void;
    info(message: string): void;
    warn(message: string): void;
}
declare const coreLogDriver: LogDriver;

declare function stringifyUnknown(value: unknown): string;

declare const environmentVariablesSchema: zod.ZodRecord<zod.ZodString, zod.ZodString>;
declare const jsonEnvironmentVariablesSchema: zod.ZodPipeline<zod.ZodEffects<zod.ZodString, unknown, string>, zod.ZodRecord<zod.ZodString, zod.ZodString>>;
type EnvironmentVariables = zod.infer<typeof environmentVariablesSchema>;
declare const jsonEnvironmentsMappingSchema: zod.ZodPipeline<zod.ZodEffects<zod.ZodString, unknown, string>, zod.ZodArray<zod.ZodObject<{
    environmentAlias: zod.ZodString;
    vcsBranch: zod.ZodString;
}, "strip", zod.ZodTypeAny, {
    environmentAlias: string;
    vcsBranch: string;
}, {
    environmentAlias: string;
    vcsBranch: string;
}>, "many">>;

export { type EnvironmentVariables, type LogDriver, coreLogDriver, jsonEnvironmentVariablesSchema, jsonEnvironmentsMappingSchema, stringifyUnknown };
