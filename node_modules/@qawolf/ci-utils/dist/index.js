'use strict';

var core = require('@actions/core');
var zod = require('zod');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var zod__default = /*#__PURE__*/_interopDefault(zod);

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });

// src/string.ts
function stringifyUnknown(value) {
  if (value === null || value === undefined) return "";
  if (typeof value === "string") return value;
  if (value instanceof Error) {
    if ("message" in value && typeof value.message === "string") return value.message;
    return value.toString();
  }
  try {
    const stringified = JSON.stringify(value);
    return !stringified ? "" : stringified;
  } catch {
    return "";
  }
}
__name(stringifyUnknown, "stringifyUnknown");

// src/log.ts
var coreLogDriver = {
  error(message, error) {
    core.error(message + (error ? `
${stringifyUnknown(error)}` : ""));
  },
  info: core.info,
  warn: core.warning
};
var environmentVariablesSchema = zod__default.default.record(zod__default.default.string(), zod__default.default.string());
var jsonEnvironmentVariablesSchema = zod__default.default.string().transform((str, ctx) => {
  try {
    return JSON.parse(str);
  } catch (error) {
    ctx.addIssue({
      code: "custom",
      message: "input is not a valid JSON-formatted string"
    });
    return;
  }
}).pipe(environmentVariablesSchema);
var environmentsMappingSchema = zod__default.default.array(zod__default.default.object({
  environmentAlias: zod__default.default.string(),
  vcsBranch: zod__default.default.string()
}));
var jsonEnvironmentsMappingSchema = zod__default.default.string().transform((str, ctx) => {
  try {
    return JSON.parse(str);
  } catch (error) {
    ctx.addIssue({
      code: "custom",
      message: "input is not a valid JSON-formatted string"
    });
    return;
  }
}).pipe(environmentsMappingSchema);

exports.coreLogDriver = coreLogDriver;
exports.jsonEnvironmentVariablesSchema = jsonEnvironmentVariablesSchema;
exports.jsonEnvironmentsMappingSchema = jsonEnvironmentsMappingSchema;
exports.stringifyUnknown = stringifyUnknown;
//# sourceMappingURL=index.js.map
//# sourceMappingURL=index.js.map