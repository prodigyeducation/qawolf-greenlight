{"version":3,"sources":["../src/string.ts","../src/log.ts","../src/types.ts"],"names":["stringifyUnknown","value","undefined","Error","message","toString","stringified","JSON","stringify","coreLogDriver","error","coreError","info","warn","warning","environmentVariablesSchema","zod","record","string","jsonEnvironmentVariablesSchema","transform","str","ctx","parse","addIssue","code","pipe","environmentsMappingSchema","array","object","environmentAlias","vcsBranch","jsonEnvironmentsMappingSchema"],"mappings":";;;;;;;;;;;;;AAAO,SAASA,iBAAiBC,KAAc,EAAA;AAC7C,EAAA,IAAIA,KAAU,KAAA,IAAA,IAAQA,KAAUC,KAAAA,SAAAA,EAAkB,OAAA,EAAA;AAElD,EAAI,IAAA,OAAOD,KAAU,KAAA,QAAA,EAAiBA,OAAAA,KAAAA;AACtC,EAAA,IAAIA,iBAAiBE,KAAO,EAAA;AAC1B,IAAA,IAAI,aAAaF,KAAS,IAAA,OAAOA,MAAMG,OAAY,KAAA,QAAA,SAC1CH,KAAMG,CAAAA,OAAAA;AAEf,IAAA,OAAOH,MAAMI,QAAQ,EAAA;AACvB;AACA,EAAI,IAAA;AACF,IAAMC,MAAAA,WAAAA,GAAcC,IAAKC,CAAAA,SAAAA,CAAUP,KAAAA,CAAAA;AAEnC,IAAO,OAAA,CAACK,cAAc,EAAKA,GAAAA,WAAAA;GACrB,CAAA,MAAA;AACN,IAAO,OAAA,EAAA;AACT;AACF;AAjBgBN,MAAAA,CAAAA,gBAAAA,EAAAA,kBAAAA,CAAAA;;;ACUT,IAAMS,aAA2B,GAAA;AACtCC,EAAAA,KAAAA,CAAMN,SAASM,KAAK,EAAA;AAClBC,IAAAA,UAAAA,CAAUP,WAAWM,KAAQ,GAAA;EAAKV,gBAAiBU,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,GAAW,EAAC,CAAA,CAAA;AACjE,GAAA;AACAE,QAAAA,SAAAA;EACAC,IAAMC,EAAAA;AACR;ACdA,IAAMC,0BAAAA,GAA6BC,qBAAIC,MAAOD,CAAAA,oBAAAA,CAAIE,QAAUF,EAAAA,oBAAAA,CAAIE,QAAM,CAAA;AAE/D,IAAMC,iCAAiCH,oBAC3CE,CAAAA,MAAAA,GACAE,SAAU,CAAA,CAACC,KAAKC,GAAAA,KAAAA;AACf,EAAI,IAAA;AACF,IAAOf,OAAAA,IAAAA,CAAKgB,MAAMF,GAAAA,CAAAA;AACpB,GAAA,CAAA,OAASX,KAAO,EAAA;AACdY,IAAAA,GAAAA,CAAIE,QAAS,CAAA;MACXC,IAAM,EAAA,QAAA;MACNrB,OAAS,EAAA;KACX,CAAA;AACA,IAAA;AACF;AACF,CAAA,CAAA,CACCsB,KAAKX,0BAAAA;AAIR,IAAMY,yBAA4BX,GAAAA,oBAAAA,CAAIY,KACpCZ,CAAAA,oBAAAA,CAAIa,MAAO,CAAA;AACTC,EAAAA,gBAAAA,EAAkBd,qBAAIE,MAAM,EAAA;AAC5Ba,EAAAA,SAAAA,EAAWf,qBAAIE,MAAM;AACvB,CAAA,CAAA,CAAA;AAEK,IAAMc,gCAAgChB,oBAC1CE,CAAAA,MAAAA,GACAE,SAAU,CAAA,CAACC,KAAKC,GAAAA,KAAAA;AACf,EAAI,IAAA;AACF,IAAOf,OAAAA,IAAAA,CAAKgB,MAAMF,GAAAA,CAAAA;AACpB,GAAA,CAAA,OAASX,KAAO,EAAA;AACdY,IAAAA,GAAAA,CAAIE,QAAS,CAAA;MACXC,IAAM,EAAA,QAAA;MACNrB,OAAS,EAAA;KACX,CAAA;AACA,IAAA;AACF;AACF,CAAA,CAAA,CACCsB,KAAKC,yBAAAA","file":"index.js","sourcesContent":["export function stringifyUnknown(value: unknown): string {\n  if (value === null || value === undefined) return \"\";\n\n  if (typeof value === \"string\") return value;\n  if (value instanceof Error) {\n    if (\"message\" in value && typeof value.message === \"string\")\n      return value.message;\n\n    return value.toString();\n  }\n  try {\n    const stringified = JSON.stringify(value);\n\n    return !stringified ? \"\" : stringified;\n  } catch {\n    return \"\";\n  }\n}\n","import { error as coreError, info, warning } from \"@actions/core\";\n\nimport { stringifyUnknown } from \"./string\";\n\nexport interface LogDriver {\n  error(message: string, error?: unknown): void;\n  info(message: string): void;\n  warn(message: string): void;\n}\n\nexport const coreLogDriver: LogDriver = {\n  error(message, error) {\n    coreError(message + (error ? `\\n${stringifyUnknown(error)}` : \"\"));\n  },\n  info,\n  warn: warning,\n};\n","import zod from \"zod\";\n\nconst environmentVariablesSchema = zod.record(zod.string(), zod.string());\n\nexport const jsonEnvironmentVariablesSchema = zod\n  .string()\n  .transform((str, ctx): unknown => {\n    try {\n      return JSON.parse(str);\n    } catch (error) {\n      ctx.addIssue({\n        code: \"custom\",\n        message: \"input is not a valid JSON-formatted string\",\n      });\n      return;\n    }\n  })\n  .pipe(environmentVariablesSchema);\n\nexport type EnvironmentVariables = zod.infer<typeof environmentVariablesSchema>;\n\nconst environmentsMappingSchema = zod.array(\n  zod.object({\n    environmentAlias: zod.string(),\n    vcsBranch: zod.string(),\n  }),\n);\nexport const jsonEnvironmentsMappingSchema = zod\n  .string()\n  .transform((str, ctx): unknown => {\n    try {\n      return JSON.parse(str);\n    } catch (error) {\n      ctx.addIssue({\n        code: \"custom\",\n        message: \"input is not a valid JSON-formatted string\",\n      });\n      return;\n    }\n  })\n  .pipe(environmentsMappingSchema);\n"]}